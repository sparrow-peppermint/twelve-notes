{"ast":null,"code":"var _jsxFileName = \"/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nconst Button = styled.button`\n  width: ${({\n  color\n}) => color === 'white' ? '60px' : '40px'};\n  height: ${({\n  color\n}) => color === 'white' ? '200px' : '130px'};\n  background: ${({\n  pressed,\n  color\n}) => pressed ? '#eee' : color};\n  border: solid black 1px;\n  box-shadow: ${({\n  color\n}) => color === 'white' ? '2px 5px' : 'none'};\n  margin: 1px;\n  margin-left: ${({\n  color\n}) => color === 'white' ? '-20px' : 0};\n  box-sizing: border-box;\n`;\n\nconst Note = ({\n  note,\n  key,\n  clickHandler\n}) => {\n  const [pressed, setPressed] = useState(false);\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.key === key) {\n        setPressed(true);\n        clickHandler();\n      }\n    };\n\n    const handleKeyUp = e => {\n      if (e.key === key) {\n        setPressed(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [clickHandler, key]);\n  const color = note.includes('#') ? 'black' : 'white';\n  return /*#__PURE__*/React.createElement(Button, {\n    color: color,\n    pressed: pressed,\n    onKeyDown: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, note);\n};\n\nexport default Note;","map":{"version":3,"sources":["/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx"],"names":["React","useEffect","useState","styled","Button","button","color","pressed","Note","note","key","clickHandler","setPressed","handleKeyDown","e","handleKeyUp","window","addEventListener","removeEventListener","includes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAACE,MAA4C;WACvD,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgBA,KAAK,KAAK,OAAV,GAAoB,MAApB,GAA6B,MAAQ;YACpD,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAgBA,KAAK,KAAK,OAAV,GAAoB,OAApB,GAA8B,OAAS;gBACnD,CAAC;AAAEC,EAAAA,OAAF;AAAWD,EAAAA;AAAX,CAAD,KAAyBC,OAAO,GAAG,MAAH,GAAYD,KAAO;;gBAEnD,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAgBA,KAAK,KAAK,OAAV,GAAoB,SAApB,GAAgC,MAAQ;;iBAEvD,CAAC;AAAEA,EAAAA;AAAF,CAAD,KAAgBA,KAAK,KAAK,OAAV,GAAoB,OAApB,GAA8B,CAAG;;CAPlE;;AAiBA,MAAME,IAAqB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA;AAAb,CAAD,KAAiC;AAC7D,QAAM,CAACJ,OAAD,EAAUK,UAAV,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,aAAa,GAAIC,CAAD,IAAsB;AAC1C,UAAIA,CAAC,CAACJ,GAAF,KAAUA,GAAd,EAAmB;AACjBE,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAD,QAAAA,YAAY;AACb;AACF,KALD;;AAMA,UAAMI,WAAW,GAAID,CAAD,IAAsB;AACxC,UAAIA,CAAC,CAACJ,GAAF,KAAUA,GAAd,EAAmB;AACjBE,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KAJD;;AAKAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,aAAnC;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,WAAjC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,aAAtC;AACAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,WAApC;AACD,KAHD;AAID,GAlBQ,EAkBN,CAACJ,YAAD,EAAeD,GAAf,CAlBM,CAAT;AAoBA,QAAMJ,KAAK,GAAGG,IAAI,CAACU,QAAL,CAAc,GAAd,IAAqB,OAArB,GAA+B,OAA7C;AAEA,sBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEb,KAAf;AAAsB,IAAA,OAAO,EAAEC,OAA/B;AAAwC,IAAA,SAAS,EAAE,MAAM,CAAE,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,IADH,CADF;AAKD,CA9BD;;AAgCA,eAAeD,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nconst Button = styled.button<{ color: string; pressed: boolean }>`\n  width: ${({ color }) => (color === 'white' ? '60px' : '40px')};\n  height: ${({ color }) => (color === 'white' ? '200px' : '130px')};\n  background: ${({ pressed, color }) => (pressed ? '#eee' : color)};\n  border: solid black 1px;\n  box-shadow: ${({ color }) => (color === 'white' ? '2px 5px' : 'none')};\n  margin: 1px;\n  margin-left: ${({ color }) => (color === 'white' ? '-20px' : 0)};\n  box-sizing: border-box;\n`\n\ntype Props = {\n  note: string\n  key: string\n  clickHandler: () => void\n}\n\nconst Note: React.FC<Props> = ({ note, key, clickHandler }) => {\n  const [pressed, setPressed] = useState(false)\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === key) {\n        setPressed(true)\n        clickHandler()\n      }\n    }\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (e.key === key) {\n        setPressed(false)\n      }\n    }\n    window.addEventListener('keydown', handleKeyDown)\n    window.addEventListener('keyup', handleKeyUp)\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown)\n      window.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [clickHandler, key])\n\n  const color = note.includes('#') ? 'black' : 'white'\n\n  return (\n    <Button color={color} pressed={pressed} onKeyDown={() => {}}>\n      {note}\n    </Button>\n  )\n}\n\nexport default Note\n"]},"metadata":{},"sourceType":"module"}