{"ast":null,"code":"var _jsxFileName = \"/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx\";\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nconst Black = styled.button`\n  width: 40px;\n  height: 130px;\n  background: black;\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n\n  :active {\n    background: #333;\n  }\n`;\nconst White = styled.button`\n  width: 60px;\n  height: 200px;\n  background: white;\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n\n  :active {\n    background: #eee;\n  }\n`;\n\nconst Note = ({\n  color,\n  note,\n  key,\n  clickHandler\n}) => {\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === key) {\n        clickHandler();\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    };\n  }, [clickHandler, key]);\n\n  const handleKeyDown = e => {\n    if (e.key === key) {\n      clickHandler();\n    }\n  };\n\n  return color == 'white' ? /*#__PURE__*/React.createElement(White, {\n    value: note,\n    onKeyDown: handleKeyDown,\n    tabIndex: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(Black, {\n    value: note,\n    onKeyDown: handleKeyDown,\n    tabIndex: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Note;","map":{"version":3,"sources":["/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx"],"names":["React","useEffect","styled","Black","button","White","Note","color","note","key","clickHandler","handleKeyPress","e","window","addEventListener","removeEventListener","handleKeyDown"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAAO;;;;;;;;;;;;CAA5B;AAcA,MAAMC,KAAK,GAAGH,MAAM,CAACE,MAAO;;;;;;;;;;;;;CAA5B;;AAsBA,MAAME,IAAqB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,GAAf;AAAoBC,EAAAA;AAApB,CAAD,KAAwC;AACpET,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,cAAc,GAAIC,CAAD,IAAsB;AAC3C,UAAIA,CAAC,CAACH,GAAF,KAAUA,GAAd,EAAmB;AACjBC,QAAAA,YAAY;AACb;AACF,KAJD;;AAKAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCH,cAAnC;AACA,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCJ,cAAtC;AACD,KAFD;AAGD,GAVQ,EAUN,CAACD,YAAD,EAAeD,GAAf,CAVM,CAAT;;AAYA,QAAMO,aAAa,GAAIJ,CAAD,IAA+C;AACnE,QAAIA,CAAC,CAACH,GAAF,KAAUA,GAAd,EAAmB;AACjBC,MAAAA,YAAY;AACb;AACF,GAJD;;AAMA,SAAOH,KAAK,IAAI,OAAT,gBACL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,IAAd;AAAoB,IAAA,SAAS,EAAEQ,aAA/B;AAA8C,IAAA,QAAQ,EAAE,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAER,IAAd;AAAoB,IAAA,SAAS,EAAEQ,aAA/B;AAA8C,IAAA,QAAQ,EAAE,CAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAKD,CAxBD;;AA0BA,eAAeV,IAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport styled from 'styled-components'\n\nconst Black = styled.button`\n  width: 40px;\n  height: 130px;\n  background: black;\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n\n  :active {\n    background: #333;\n  }\n`\n\nconst White = styled.button`\n  width: 60px;\n  height: 200px;\n  background: white;\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n\n  :active {\n    background: #eee;\n  }\n`\n\ntype Props = {\n  color: string\n  note: string\n  key: string\n  clickHandler: () => void\n}\n\nconst Note: React.FC<Props> = ({ color, note, key, clickHandler }) => {\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === key) {\n        clickHandler()\n      }\n    }\n    window.addEventListener('keydown', handleKeyPress)\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n    }\n  }, [clickHandler, key])\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n    if (e.key === key) {\n      clickHandler()\n    }\n  }\n\n  return color == 'white' ? (\n    <White value={note} onKeyDown={handleKeyDown} tabIndex={0} />\n  ) : (\n    <Black value={note} onKeyDown={handleKeyDown} tabIndex={0} />\n  )\n}\n\nexport default Note\n"]},"metadata":{},"sourceType":"module"}