{"ast":null,"code":"var _jsxFileName = \"/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nconst Black = styled.button`\n  width: 40px;\n  height: 130px;\n  background: ${props => props.pressed ? '#333' : 'black'};\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n`;\nconst White = styled.button`\n  width: 60px;\n  height: 200px;\n  background: ${props => props.pressed ? '#eee' : 'white'};\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n`;\n\nconst Note = ({\n  color,\n  note,\n  key,\n  clickHandler\n}) => {\n  // const [pressed, setPressed] = useState(false)\n  // useEffect(() => {\n  //   const handleKeyDown = (e: KeyboardEvent) => {\n  //     if (e.key === key) {\n  //       setPressed(true)\n  //       clickHandler()\n  //     }\n  //   }\n  //   const handleKeyUp = (e: KeyboardEvent) => {\n  //     if (e.key === key) {\n  //       setPressed(false)\n  //     }\n  //   }\n  //   window.addEventListener('keydown', handleKeyDown)\n  //   window.addEventListener('keyup', handleKeyUp)\n  //   return () => {\n  //     window.removeEventListener('keydown', handleKeyDown)\n  //     window.removeEventListener('keyup', handleKeyUp)\n  //   }\n  // }, [clickHandler, key])\n  return color == 'white' ? /*#__PURE__*/React.createElement(White, {\n    value: note,\n    onKeyDown: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(Black, {\n    value: note,\n    onKeyDown: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Note;","map":{"version":3,"sources":["/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx"],"names":["React","styled","Black","button","props","pressed","White","Note","color","note","key","clickHandler"],"mappings":";AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAA6B;;;gBAGjCC,KAAD,IAAYA,KAAK,CAACC,OAAN,GAAgB,MAAhB,GAAyB,OAAS;;;;;CAH9D;AAUA,MAAMC,KAAK,GAAGL,MAAM,CAACE,MAA6B;;;gBAGjCC,KAAD,IAAYA,KAAK,CAACC,OAAN,GAAgB,MAAhB,GAAyB,OAAS;;;;;;CAH9D;;AAkBA,MAAME,IAAqB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,GAAf;AAAoBC,EAAAA;AAApB,CAAD,KAAwC;AACpE;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAOH,KAAK,IAAI,OAAT,gBACL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,IAAd;AAAoB,IAAA,SAAS,EAAE,MAAM,CAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,IAAd;AAAoB,IAAA,SAAS,EAAE,MAAM,CAAE,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAKD,CA5BD;;AA8BA,eAAeF,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nconst Black = styled.button<{ pressed: boolean }>`\n  width: 40px;\n  height: 130px;\n  background: ${(props) => (props.pressed ? '#333' : 'black')};\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n`\n\nconst White = styled.button<{ pressed: boolean }>`\n  width: 60px;\n  height: 200px;\n  background: ${(props) => (props.pressed ? '#eee' : 'white')};\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n`\n\ntype Props = {\n  color: string\n  note: string\n  key: string\n  clickHandler: () => void\n}\n\nconst Note: React.FC<Props> = ({ color, note, key, clickHandler }) => {\n  // const [pressed, setPressed] = useState(false)\n\n  // useEffect(() => {\n  //   const handleKeyDown = (e: KeyboardEvent) => {\n  //     if (e.key === key) {\n  //       setPressed(true)\n  //       clickHandler()\n  //     }\n  //   }\n  //   const handleKeyUp = (e: KeyboardEvent) => {\n  //     if (e.key === key) {\n  //       setPressed(false)\n  //     }\n  //   }\n  //   window.addEventListener('keydown', handleKeyDown)\n  //   window.addEventListener('keyup', handleKeyUp)\n  //   return () => {\n  //     window.removeEventListener('keydown', handleKeyDown)\n  //     window.removeEventListener('keyup', handleKeyUp)\n  //   }\n  // }, [clickHandler, key])\n\n  return color == 'white' ? (\n    <White value={note} onKeyDown={() => {}} />\n  ) : (\n    <Black value={note} onKeyDown={() => {}} />\n  )\n}\n\nexport default Note\n"]},"metadata":{},"sourceType":"module"}