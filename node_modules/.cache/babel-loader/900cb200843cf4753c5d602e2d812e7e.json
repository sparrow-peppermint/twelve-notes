{"ast":null,"code":"var _jsxFileName = \"/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nconst Black = styled.button`\n  width: 40px;\n  height: 130px;\n  background: ${({\n  pressed\n}) => pressed ? '#333' : 'black'};\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n\n  :active {\n    background: #333;\n  }\n`;\nconst White = styled.button`\n  width: 60px;\n  height: 200px;\n  background: ${({\n  pressed\n}) => pressed ? '#eee' : 'white'};\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n\n  :active {\n    background: #eee;\n  }\n`;\n\nconst Note = ({\n  color,\n  note,\n  key,\n  clickHandler,\n  pressed\n}) => {\n  const [isPressed, setIsPressed] = useState(false);\n  useEffect(() => {\n    setIsPressed(pressed);\n  }, [pressed]);\n  useEffect(() => {\n    const handleKeyPress = e => {\n      if (e.key === key) {\n        clickHandler();\n        setIsPressed(true);\n      }\n    };\n\n    const handleKeyUp = e => {\n      if (e.key === key) {\n        setIsPressed(false);\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyPress);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [clickHandler, key]);\n  return color == 'white' ? /*#__PURE__*/React.createElement(White, {\n    value: note,\n    onClick: clickHandler,\n    pressed: isPressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(Black, {\n    value: note,\n    onClick: clickHandler,\n    pressed: isPressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Note;","map":{"version":3,"sources":["/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx"],"names":["React","useEffect","useState","styled","Black","button","pressed","White","Note","color","note","key","clickHandler","isPressed","setIsPressed","handleKeyPress","e","handleKeyUp","window","addEventListener","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAAO;;;gBAGZ,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,OAAO,GAAG,MAAH,GAAY,OAAS;;;;;;;;;CAH9D;AAcA,MAAMC,KAAK,GAAGJ,MAAM,CAACE,MAAO;;;gBAGZ,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,OAAO,GAAG,MAAH,GAAY,OAAS;;;;;;;;;;CAH9D;;AAuBA,MAAME,IAAqB,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,GAAf;AAAoBC,EAAAA,YAApB;AAAkCN,EAAAA;AAAlC,CAAD,KAAiD;AAC7E,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,YAAY,CAACR,OAAD,CAAZ;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,cAAc,GAAIC,CAAD,IAAsB;AAC3C,UAAIA,CAAC,CAACL,GAAF,KAAUA,GAAd,EAAmB;AACjBC,QAAAA,YAAY;AACZE,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;AACF,KALD;;AAMA,UAAMG,WAAW,GAAID,CAAD,IAAsB;AACxC,UAAIA,CAAC,CAACL,GAAF,KAAUA,GAAd,EAAmB;AACjBG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAJD;;AAKAI,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCJ,cAAnC;AACAG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCF,WAAjC;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCL,cAAtC;AACAG,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,WAApC;AACD,KAHD;AAID,GAlBQ,EAkBN,CAACL,YAAD,EAAeD,GAAf,CAlBM,CAAT;AAoBA,SAAOF,KAAK,IAAI,OAAT,gBACL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,IAAd;AAAoB,IAAA,OAAO,EAAEE,YAA7B;AAA2C,IAAA,OAAO,EAAEC,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEH,IAAd;AAAoB,IAAA,OAAO,EAAEE,YAA7B;AAA2C,IAAA,OAAO,EAAEC,SAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAKD,CAhCD;;AAkCA,eAAeL,IAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\n\nconst Black = styled.button`\n  width: 40px;\n  height: 130px;\n  background: ${({ pressed }) => (pressed ? '#333' : 'black')};\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n\n  :active {\n    background: #333;\n  }\n`\n\nconst White = styled.button`\n  width: 60px;\n  height: 200px;\n  background: ${({ pressed }) => (pressed ? '#eee' : 'white')};\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n\n  :active {\n    background: #eee;\n  }\n`\n\ntype Props = {\n  color: string\n  note: string\n  key: string\n  clickHandler: () => void\n  pressed: boolean\n}\n\nconst Note: React.FC<Props> = ({ color, note, key, clickHandler, pressed }) => {\n  const [isPressed, setIsPressed] = useState(false)\n\n  useEffect(() => {\n    setIsPressed(pressed)\n  }, [pressed])\n\n  useEffect(() => {\n    const handleKeyPress = (e: KeyboardEvent) => {\n      if (e.key === key) {\n        clickHandler()\n        setIsPressed(true)\n      }\n    }\n    const handleKeyUp = (e: KeyboardEvent) => {\n      if (e.key === key) {\n        setIsPressed(false)\n      }\n    }\n    window.addEventListener('keydown', handleKeyPress)\n    window.addEventListener('keyup', handleKeyUp)\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n      window.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [clickHandler, key])\n\n  return color == 'white' ? (\n    <White value={note} onClick={clickHandler} pressed={isPressed} />\n  ) : (\n    <Black value={note} onClick={clickHandler} pressed={isPressed} />\n  )\n}\n\nexport default Note\n"]},"metadata":{},"sourceType":"module"}