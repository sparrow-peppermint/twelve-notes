{"ast":null,"code":"var _jsxFileName = \"/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nconst Black = styled.button`\n  width: 40px;\n  height: 130px;\n  background: ${props => props.pressed ? '#333' : 'black'};\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n`;\nconst White = styled.button`\n  width: 60px;\n  height: 200px;\n  background: ${props => props.pressed ? '#eee' : 'white'};\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n`;\n\nconst Note = ({\n  color,\n  note,\n  clickHandler,\n  pressed,\n  setPressed\n}) => {\n  const handleKeyPress = e => {\n    if (e.key === note) {\n      setPressed(true);\n      clickHandler();\n    }\n  };\n\n  const handleKeyUp = e => {\n    if (e.key === note) {\n      setPressed(false);\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress);\n    window.addEventListener('keyup', handleKeyUp);\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [handleKeyPress, handleKeyUp]);\n  return color == 'white' ? /*#__PURE__*/React.createElement(White, {\n    value: note,\n    pressed: pressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(Black, {\n    value: note,\n    pressed: pressed,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Note;","map":{"version":3,"sources":["/Users/sparrowpeppermint/devacademy/twelve-notes/src/Note.tsx"],"names":["React","styled","Black","button","props","pressed","White","Note","color","note","clickHandler","setPressed","handleKeyPress","e","key","handleKeyUp","useEffect","window","addEventListener","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAA6B;;;gBAGjCC,KAAD,IAAYA,KAAK,CAACC,OAAN,GAAgB,MAAhB,GAAyB,OAAS;;;;;CAH9D;AAUA,MAAMC,KAAK,GAAGL,MAAM,CAACE,MAA6B;;;gBAGjCC,KAAD,IAAYA,KAAK,CAACC,OAAN,GAAgB,MAAhB,GAAyB,OAAS;;;;;;CAH9D;;AAmBA,MAAME,IAAqB,GAAG,CAAC;AAC7BC,EAAAA,KAD6B;AAE7BC,EAAAA,IAF6B;AAG7BC,EAAAA,YAH6B;AAI7BL,EAAAA,OAJ6B;AAK7BM,EAAAA;AAL6B,CAAD,KAMxB;AACJ,QAAMC,cAAc,GAAIC,CAAD,IAAsB;AAC3C,QAAIA,CAAC,CAACC,GAAF,KAAUL,IAAd,EAAoB;AAClBE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAD,MAAAA,YAAY;AACb;AACF,GALD;;AAOA,QAAMK,WAAW,GAAIF,CAAD,IAAsB;AACxC,QAAIA,CAAC,CAACC,GAAF,KAAUL,IAAd,EAAoB;AAClBE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAJD;;AAMAX,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCN,cAAnC;AACAK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCH,WAAjC;AAEA,WAAO,MAAM;AACXE,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCP,cAAtC;AACAK,MAAAA,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCJ,WAApC;AACD,KAHD;AAID,GARD,EAQG,CAACH,cAAD,EAAiBG,WAAjB,CARH;AAUA,SAAOP,KAAK,IAAI,OAAT,gBACL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEC,IAAd;AAAoB,IAAA,OAAO,EAAEJ,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,gBAGL,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEI,IAAd;AAAoB,IAAA,OAAO,EAAEJ,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF;AAKD,CAnCD;;AAqCA,eAAeE,IAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\nconst Black = styled.button<{ pressed: boolean }>`\n  width: 40px;\n  height: 130px;\n  background: ${(props) => (props.pressed ? '#333' : 'black')};\n  border: solid black 1px;\n  position: absolute;\n  margin: 1px;\n  margin-left: -20px;\n`\n\nconst White = styled.button<{ pressed: boolean }>`\n  width: 60px;\n  height: 200px;\n  background: ${(props) => (props.pressed ? '#eee' : 'white')};\n  border: solid black 1px;\n  box-shadow: 2px 5px;\n  margin: 1px;\n  margin-left: '-20px';\n  box-sizing: border-box;\n`\n\ntype Props = {\n  color: string\n  note: string\n  clickHandler: () => void\n  pressed: boolean\n  setPressed: React.Dispatch<React.SetStateAction<boolean>>\n}\n\nconst Note: React.FC<Props> = ({\n  color,\n  note,\n  clickHandler,\n  pressed,\n  setPressed,\n}) => {\n  const handleKeyPress = (e: KeyboardEvent) => {\n    if (e.key === note) {\n      setPressed(true)\n      clickHandler()\n    }\n  }\n\n  const handleKeyUp = (e: KeyboardEvent) => {\n    if (e.key === note) {\n      setPressed(false)\n    }\n  }\n\n  React.useEffect(() => {\n    window.addEventListener('keydown', handleKeyPress)\n    window.addEventListener('keyup', handleKeyUp)\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress)\n      window.removeEventListener('keyup', handleKeyUp)\n    }\n  }, [handleKeyPress, handleKeyUp])\n\n  return color == 'white' ? (\n    <White value={note} pressed={pressed} />\n  ) : (\n    <Black value={note} pressed={pressed} />\n  )\n}\n\nexport default Note\n"]},"metadata":{},"sourceType":"module"}